networks:
  dev-net:
    name: 'dev-net'
    driver: bridge

services:
  kafka:
    container_name: kafka
    image: confluentinc/cp-kafka:7.7.0
    ports:
      - ${KAFKA_PORTS}
    networks:
      - dev-net
    environment:
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://${KAFKA_INTERNAL_LISTENER},PLAINTEXT_HOST://${KAFKA_EXTERNAL_LISTENER}
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_NODE_ID: 1
      CLUSTER_ID: r93l-jBYSguv4YLse9ytzw
      KAFKA_PROCESS_ROLES: controller,broker
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@${KAFKA_CONTROLLER}
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENERS: PLAINTEXT://${KAFKA_INTERNAL_LISTENER},PLAINTEXT_HOST://${KAFKA_LISTENERS_PLAINTEXT},CONTROLLER://${KAFKA_CONTROLLER}
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'false'
      KAFKA_CREATE_TOPICS: |
        tasks.artifact.pending:3:1,
        tasks.artifact.completed:3:1

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - 8090:8080
    networks:
    - dev-net
    environment:
      DYNAMIC_CONFIG_ENABLED: "true"
      KAFKA_CLUSTERS_0_NAME: "witch"
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: "kafka:9092"
      KAFKA_CLUSTERS_0_PROPERTIES_SECURITY_PROTOCOL: "PLAINTEXT"

  postgres:
    container_name: postgres
    image: postgres:15-alpine
    ports:
      - ${DB_PORTS}
    networks:
      - dev-net
    environment:
      POSTGRES_DB: witch_workshop
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - .infra/initdb:/docker-entrypoint-initdb.d

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
    ports:
      - ${PGADMIN_PORTS}
    networks:
      - dev-net
    depends_on:
      - postgres

  artifact-service:
    build:
      context: ./artifact-service
      dockerfile: Dockerfile
    networks:
      - dev-net
    environment:
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      SPRING_PROFILES_ACTIVE: docker
    ports:
      - "8081:8081"
    depends_on:
      - kafka

volumes:
  postgres-data:
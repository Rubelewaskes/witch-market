networks:
  dev-net:
    name: 'dev-net'
    driver: bridge

services:
  kafka:
    container_name: kafka
    image: confluentinc/cp-kafka:7.7.0
    ports:
      - ${KAFKA_PORT_OUT}:${KAFKA_PORT_IN}
    networks:
      - dev-net
    environment:
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://${KAFKA_INTERNAL_LISTENER_HOST}:${KAFKA_INTERNAL_LISTENER_PORT},PLAINTEXT_HOST://${KAFKA_EXTERNAL_LISTENER_HOST}:${KAFKA_EXTERNAL_LISTENER_PORT}
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_NODE_ID: 1
      CLUSTER_ID: r93l-jBYSguv4YLse9ytzw
      KAFKA_PROCESS_ROLES: controller,broker
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@${KAFKA_CONTROLLER_HOST}:${KAFKA_CONTROLLER_PORT}
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENERS: PLAINTEXT://${KAFKA_INTERNAL_LISTENER_HOST}:${KAFKA_INTERNAL_LISTENER_PORT},PLAINTEXT_HOST://${KAFKA_LISTENERS_PLAINTEXT_HOST}:${KAFKA_LISTENERS_PLAINTEXT_PORT},CONTROLLER://${KAFKA_CONTROLLER_HOST}:${KAFKA_CONTROLLER_PORT}

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - ${KAFKA_UI_PORT_OUT}:${KAFKA_UI_PORT_IN}
    networks:
    - dev-net
    environment:
      DYNAMIC_CONFIG_ENABLED: "true"
      KAFKA_CLUSTERS_0_NAME: "witch"
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: "${KAFKA_EXTERNAL_LISTENER_HOST}:${KAFKA_EXTERNAL_LISTENER_PORT}"
      KAFKA_CLUSTERS_0_PROPERTIES_SECURITY_PROTOCOL: "PLAINTEXT"

  postgres:
    container_name: postgres
    image: postgres:15-alpine
    ports:
      - ${DB_PORT_OUT}:${DB_PORT_IN}
    networks:
      - dev-net
    environment:
      POSTGRES_DB: witch_workshop
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./infra/initdb:/docker-entrypoint-initdb.d
  
  order-management-service:
    build:
      context: ./order-management-service
      dockerfile: Dockerfile
    networks:
      - dev-net
    environment:
      SPRING_PROFILES_ACTIVE: docker
    ports:
      - ${OMS_PORT_OUT}:${OMS_PORT_IN}
    depends_on:
      - kafka
      - postgres

  artifact-service:
    build:
      context: ./artifact-service
      dockerfile: Dockerfile
    networks:
      - dev-net
    environment:
      SPRING_PROFILES_ACTIVE: docker
    ports:
      - ${AS_PORT_OUT}:${AS_PORT_IN}
    depends_on:
      - kafka
      - postgres

volumes:
  postgres-data: